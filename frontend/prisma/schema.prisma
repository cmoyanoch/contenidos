// Schema de Prisma para Veo 3.0 Frontend
// Conecta con la base de datos PostgreSQL existente

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario para el frontend
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // Contrase√±a hasheada
  role      String   @default("user") // 'admin' o 'user'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  videoOperations VideoOperation[]
  sessions        Session[]
  accounts        Account[]
  campaigns       Campaign[]
  themePlanning   ThemePlanning[] // üÜï NUEVO: Planificador de tem√°ticas

  @@map("users")
}

// Modelo de Operaciones de Video
model VideoOperation {
  id          String   @id @default(cuid())
  operationId String?  @unique // ID √∫nico para operaciones de N8N
  userId      String?  // ‚úÖ Ahora es opcional para webhooks sin usuario
  prompt      String
  status      String   @default("pending") // pending, processing, completed, failed
  videoUrl    String?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaci√≥n opcional con campa√±a
  campaignId String? @map("campaignid")
  campaign   Campaign? @relation("CampaignVideos", fields: [campaignId], references: [id], onDelete: SetNull)

  // Relaciones
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)  // ‚úÖ Relaci√≥n tambi√©n opcional

  @@map("video_operations")
}

// Modelo de Sesiones (para NextAuth)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Modelo de Cuentas (para NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Modelo de Verificaci√≥n (para NextAuth)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelo de Credenciales de Redes Sociales
model SocialCredentials {
  id        String   @id @default(cuid())
  platform  String   // instagram, facebook, linkedin, whatsapp

  // Campos comunes
  accessToken String

  // Instagram
  accountId String?

  // Facebook
  pageId String?

  // LinkedIn
  personId String?

  // WhatsApp
  phoneNumberId String?
  businessAccountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform])
  @@map("social_credentials")
}

// Modelo de Credenciales de Google API
model GoogleCredentials {
  id        String   @id @default(cuid())

  // Google Cloud Configuration
  googleApiKey String
  googleCloudProject String
  googleCloudRegion String
  googleApplicationCredentials String? @db.Text

  // Google Cloud Storage
  gcsBucketName String
  gcsProjectId String
  gcsCredentialsPath String?

  // Security
  secretKey String
  algorithm String @default("HS256")
  accessTokenExpireMinutes Int @default(30)

  // File Upload
  maxFileSize Int @default(10485760)
  uploadDir String @default("uploads")

  // Logging
  logLevel String @default("INFO")
  logFile String @default("logs/app.log")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("google_credentials")
}

// Modelo de Campa√±a para contenido automatizado
model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?

  // Configuraci√≥n de campa√±a
  status      String   @default("draft") // draft, active, paused, completed, archived
  type        String   // ugc_video, social_media, continuous_content

  // Configuraci√≥n de contenido
  targetPlatforms String[] @map("targetplatforms") // ["instagram", "tiktok", "youtube", "facebook"]
  aspectRatio     String   @default("9:16") @map("aspectratio") // 16:9, 9:16, 1:1
  duration        Int      @default(8) // Duraci√≥n en segundos

  // Configuraci√≥n de generaci√≥n
  promptTemplate  String?  @map("prompttemplate") // Template base para prompts
  characterStyle  String?  @map("characterstyle") // Estilo de personaje consistente
  brandGuidelines String?  @map("brandguidelines") // Guidelines de marca

  // Programaci√≥n
  scheduledStart  DateTime? @map("scheduledstart")
  scheduledEnd    DateTime? @map("scheduledend")
  frequency       String?   // daily, weekly, hourly
  totalVideos     Int       @default(1) @map("totalvideos")

  // Metadata
  tags            String[]  // Tags para organizaci√≥n
  priority        Int       @default(5) // 1-10 prioridad

  // Relaciones
  userId          String    @map("userid")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt       DateTime  @default(now()) @map("createdat")
  updatedAt       DateTime  @updatedAt @map("updatedat")

  // Relaciones con videos generados
  videoOperations VideoOperation[] @relation("CampaignVideos")

  @@map("campaigns")
}

// ============================================================================
// üÜï NUEVO: M√ìDULO DE PLANIFICACI√ìN DE TEM√ÅTICAS
// ============================================================================

model ThemePlanning {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  themeName         String    @map("theme_name")
  themeDescription  String?   @map("theme_description")
  startDate         DateTime  @map("start_date") @db.Date
  endDate           DateTime  @map("end_date") @db.Date
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("theme_planning")
  @@index([userId])
  @@index([startDate, endDate])
  @@index([themeName])
}
